🟩 / 내 답변
🟨 / 강사님 내용을 보고 답한 것
🟥 / 답변이 나오지 않음

Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 🟩 웹페이지를 구현할 때 컴포넌트별로 나누어 태그를 관리하기 위해서
    - 🟨 복잡한 사용자 인터페이스를 쉽게 구축하기 위해
    - 라이브러리가 잘 구축되어 있어서, SPA 관점에 따라 다르다고 생각한다
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 🟨 재사용이 용이하고 관리 및 유지 보수에 효율적이다.
    - 프론트 단의 서버에서 관리하기 때문에 더 빠른 속도가 나온다
    - 깜빡임 없이 확확 바뀐다.(사용자 경험 증대)
    - ex) 7px 정도의 작은 수정도 react는 component로 
    - 작압속도 증진 예상


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 🟨 컴포넌트의 랜더링을 state(상태)값의 변화에 따라 컴포넌트의 랜더링을 달리하기 위해서
    - 

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 🟩 ReRendering


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 🟩 불필요한 랜더링을 최소화할 수 있다.


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 🟩 component를 관리하는 state의 값이 바뀌었을때
    - 🟨 가상돔과 실제돔의 (state값의) 차이가 발생했을때

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState
        - 🟨 가상돔과 실제돔의 state값을 비교하여 리랜더링을 하기 위해
        - 🟩 state의 값이 바뀔 때
    
    (2) useRef
        - 🟨 ref 객체 내부 값을 render와 상관없이 유지하기 위해
        - 🟨 html 요소에 접근할 때
    
    (3) useEffect
        - 🟨 state의 변화가 있을때마다 연산을 하지않아도 되는 것을 최소화
        - 🟨 의존성 배열에 state가 추가될 때

    (4) useCallback
        - 🟨 특정 함수를 새로 만들지 않고 (선언❌) 캐싱하고
          화면에 랜더링 되었을 때 재사용 하기 위해
        - 🟨 특정 값을 재연산하지 않고 값만 저장했다가 사용할 때
    
    (5) useMemo
        - 🟨 랜더링에서 수행하고 싶지 않은 무거운 계산을 피하기 위해
        - 🟨 props를 기반으로 큰 배열을 계산하지 않고 저장하여 사용할 때

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 🟩 여러 훅함수들의 이점만을 모아서 생성할 수 있다.
    - 🟩 서로 다른 구성요소에서 동일한 코드를 여러 번 작성할 때

Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 🟩 프로젝트의 요구사항
    - 🟩 프로젝트 디자인
    - 🟩 컴포넌트 구조
    - 🟩 성능
    - 🟩 테스트
    - 🟩 보안
    - 🟩 개발도구와 라이브러리
    - 🟩 React 커뮤니티와 후원
    - learning curve
    - 프로젝트를 진행하는 구성원이 선호하는 언어
    - CSR(Client Side Rendering), SSR(Server Side Rendering)

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 🟩 컴포넌트 사용의 여부
    - 🟩 코드 재사용과 코드관리 방식의 차이
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 🟩 프로젝트의 특징에 따라 유지보수를 쉽게 할 수 있어야 한다.
     - 🟩 개발자마다 개발 시 우선순위를 하는 것이 다르기 때문이라고 생각합니다.
            누군가는 단일 책임 원칙보다 재사용성을 우선시하고 
            누군가는 구성 요소 계층보다 문제 분리를 우선시할 수도 있기 때문입니다. 
